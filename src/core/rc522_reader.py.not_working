from pirc522 import RFID
from typing import Optional
from src.core.rfid_reader import RFIDReader
from src.utils.logger import get_logger
import time

logger = get_logger(__name__)

class RC522Reader(RFIDReader):
    def __init__(self, poll_interval=0.2):
        self._reader = None
        self._current_card_present = None
        self._last_detect_time = 0
        self._min_detect_interval = 2.0  # Minimum 2 seconds between card reads
        self._last_removal_time = 0      # Track when card was last removed
        self._card_removed = True        # Track if card has been fully removed
        self._read_attempts = 0
        self._max_read_attempts = 3
        self._poll_interval = poll_interval

        logger.info("RC522Reader: Initialising...")

    def initialise(self) -> bool:
        try:
            self._reader = RFID(pin_irq = None, antenna_gain = 3)
            logger.info("RC522Reader: Successfully initialised")
            return True
        except Exception as e:
            logger.error(f"RC522Reader: Failed to initialise - {str(e)}")
            return False

    def read_tag_debounced(self) -> Optional[str]:
        """Enhanced debounced read with card removal detection."""
        current_time = time.time()
        new_id = self.read_tag()

        # If no card present
        if new_id is None:
            self._current_card_present = None
            return None

        # Card is present, update removal tracking
        self._card_removed = False
        
        # If same card still present, ignore it
        if new_id == self._current_card_present:
            return None
        
        # Check if enough time has passed since last card removal
        if not self._card_removed and (current_time - self._last_removal_time) < self._min_detect_interval:
            return None

        # Check if minimum interval has passed since last detection
        if (current_time - self._last_detect_time) < self._min_detect_interval:
            return None

        # New card detected after all intervals satisfied
        self._current_card_present = new_id
        self._last_detect_time = current_time
        logger.info(f"RC522Reader: New card detected: {new_id}")
        return new_id
        
    def read_tag(self) -> Optional[str]:
        """Non-blocking read implementation using pirc522 library."""
        # Enforce extremely long minimum time between reads
        current_time = time.time()

        if current_time - self._last_detect_time < 1.0:  # 5-second interval
            return None
        
        self._last_detect_time = current_time

        try:
            if not self._reader:
                return None

            # Check for card
            (status, tag_type) = self._reader.request()

            # If no card is present
            if status != 0:
                # If we previously had a card, mark its removal
                if not self._card_removed:
                    self._last_removal_time = time.time()
                    self._card_removed = True
                return None 

            uid = self._reader.read_id(False)
            
            # Small sleep to prevent tight looping
            time.sleep(0.1)

            # If no card is present
            if uid is None:
                # If we previously had a card, mark its removal
                if not self._card_removed:
                    self._last_removal_time = time.time()
                    self._card_removed = True
                return None

            tag_id = f"TAG_{uid}"
            return tag_id
                
        except Exception as e:
            logger.error(f"RC522Reader: Error reading card - {str(e)}")
            return None

    def cleanup(self) -> None:
        try:
            if self._reader:
                self._reader.cleanup()
                self._reader = None
            logger.info("RC522Reader: Cleaned up")
        except Exception as e:
            logger.error(f"RC522Reader: Error during cleanup - {str(e)}")